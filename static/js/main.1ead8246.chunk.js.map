{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Section/Section.module.css","components/PageTitle/PageTitle.module.css","components/Title/Title.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts-actions.js","redux/contacts-reducers.js","redux/store.js","components/Section/Section.js","components/PageTitle/PageTitle.js","components/Title/Title.js","redux/contacts-operations.js","redux/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","updateFilter","items","createReducer","_","payload","state","filter","contact","id","loading","phonebookReducer","combineReducers","middleware","getDefaultMiddleware","logger","customizedMiddleware","serializableCheck","store","configureStore","reducer","contacts","devTools","process","Section","children","className","styles","container","PageTitle","title","defaultProps","Title","axios","defaults","baseURL","getFilterValue","getAllContacts","getFilteredItems","createSelector","name","number","toLowerCase","includes","toLocaleLowerCase","getLoading","ContactForm","handleInputChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","submitHandler","existingContact","find","alert","trim","reset","form","onSubmit","this","type","onChange","required","btn","Component","connect","dispatch","a","post","data","addContact","Filter","filterValue","filterUpdate","autoComplete","target","ContactList","fetchContacts","filtered","onDeleteContact","isLoading","loaderConfig","color","height","width","loader","isEmpty","map","item","onClick","notification","contactId","delete","deleteContact","get","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ead8246.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3YjnV\",\"btn\":\"ContactForm_btn__1KHYl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__1_Fhp\",\"title\":\"Section_title__1OXFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageTitle_title__1Nd9K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1tYVA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2uVq7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__1u7Hp\",\"item\":\"ContactList_item__37drS\",\"btn\":\"ContactList_btn__79ddY\",\"notification\":\"ContactList_notification__1vt9F\"};","// Imports from Redux Toolkit\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst updateFilter = createAction('phonebook/updateFilter');\r\n\r\nexport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  updateFilter,\r\n};","// Imports from Redux\r\nimport { combineReducers } from 'redux';\r\n// Imports from Redux Toolkit\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// Imports of actions\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  updateFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [updateFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nexport const phonebookReducer = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});","// Imports from Redux Toolkit\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// Imports of middleware\r\nimport logger from 'redux-logger';\r\n// Imports of reducers\r\nimport { phonebookReducer } from './contacts-reducers';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst customizedMiddleware = getDefaultMiddleware({\r\n  serializableCheck: false\r\n})\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: phonebookReducer,\r\n  },\r\n  middleware,\r\n  customizedMiddleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport { store };","// Imports from React\r\nimport React from 'react';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ children }) => {\r\n  return (\r\n    <section>\r\n      <div className={styles.container}>{children}</div>\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","// Imports from React\r\nimport React from 'react';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './PageTitle.module.css';\r\n\r\nconst PageTitle = ({ title }) => {\r\n  return title && <h1 className={styles.title}>{title}</h1>;\r\n};\r\n\r\nPageTitle.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nPageTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default PageTitle;","// Imports from React\r\nimport React from 'react';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './Title.module.css';\r\n\r\nconst Title = ({ title }) => {\r\n  return title && <h2 className={styles.title}>{title}</h2>;\r\n};\r\n\r\nTitle.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Title;","// Imports of actions\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n// Imports of libraries\r\nimport axios from 'axios';\r\naxios.defaults.baseURL = 'https://61eb18a77ec58900177cdbb5.mockapi.io';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport { fetchContacts, addContact, deleteContact };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilterValue = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilteredItems = createSelector(\r\n  [getAllContacts, getFilterValue],\r\n  (items, filter) =>\r\n    items.filter(\r\n      ({ name, number }) =>\r\n        name.toLowerCase().includes(filter.toLocaleLowerCase()) ||\r\n        number.includes(filter),\r\n    ),\r\n);\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nexport { getFilterValue, getAllContacts, getFilteredItems, getLoading };","// Imports from React\r\nimport React, { Component } from 'react';\r\n// Imports from Redux\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts-operations';\r\nimport { getAllContacts } from '../../redux/contacts-selectors';\r\n// Helpers imports\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: '', number: '' };\r\n\r\n  static propTypes = {\r\n    submitHandler: PropTypes.func.isRequired,\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { items, submitHandler } = this.props;\r\n\r\n    if (!name) {\r\n      return;\r\n    }\r\n\r\n    const existingContact = items.find(contact => contact.name === name);\r\n\r\n    if (existingContact) {\r\n      alert(`${existingContact.name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    const newContact = { name: name.trim(), number: number.trim() };\r\n\r\n    submitHandler(newContact);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"name\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleInputChange}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.btn}>\r\n          Add\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  items: getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  submitHandler: contact => dispatch(addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","// Imports from React\r\nimport React from 'react';\r\n// Imports from Redux\r\nimport { connect } from 'react-redux';\r\nimport { updateFilter } from '../../redux/contacts-actions';\r\nimport { getFilterValue } from '../../redux/contacts-selectors';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\n// Styles imports\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ filterValue, filterUpdate }) => {\r\n  return (\r\n    <div className={styles.filter}>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          value={filterValue}\r\n          onChange={filterUpdate}\r\n          autoComplete=\"off\"\r\n          required\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.defaultProps = {\r\n  filterValue: '',\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string,\r\n  filterUpdate: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filterValue: getFilterValue(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterUpdate: event => dispatch(updateFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","// Imports from React\r\nimport React, { Component } from 'react';\r\n// Imports from Redux\r\nimport { connect } from 'react-redux';\r\nimport { fetchContacts, deleteContact } from '../../redux/contacts-operations';\r\nimport { getFilteredItems, getLoading } from '../../redux/contacts-selectors';\r\n// Imports of helpers\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'lodash';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n// Styles imports\r\nimport styles from './ContactList.module.css';\r\n\r\nclass ContactList extends Component {\r\n  static propTypes = {\r\n    filtered: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }).isRequired,\r\n    ).isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { filtered, onDeleteContact, isLoading } = this.props;\r\n    const loaderConfig = {\r\n      type: 'TailSpin',\r\n      color: '#80cbc4',\r\n      height: 50,\r\n      width: 50,\r\n      className: styles.loader,\r\n    };\r\n\r\n    return (\r\n      <>\r\n        {isLoading && <Loader {...loaderConfig} />}\r\n\r\n        {!_.isEmpty(filtered) && (\r\n          <ul className={styles.contacts}>\r\n            {filtered.map(({ id, name, number }) => (\r\n              <li key={id} className={styles.item}>\r\n                <div>\r\n                  <p>{name}:</p>\r\n                  <p>{number}</p>\r\n                </div>\r\n\r\n                <button\r\n                  className={styles.btn}\r\n                  onClick={() => {\r\n                    onDeleteContact(id);\r\n                  }}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n\r\n        {_.isEmpty(filtered) && !isLoading && (\r\n          <p className={styles.notification}>No contact found.</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  filtered: getFilteredItems(state),\r\n  isLoading: getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: contactId => dispatch(deleteContact(contactId)),\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\n\r\nimport Section from \"./components/Section\";\r\nimport PageTitle from \"./components/PageTitle\";\r\nimport Title from \"./components/Title\";\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport Filter from \"./components/Filter\";\r\nimport ContactList from \"./components/ContactList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Phone Book\" />\r\n      <Section>\r\n        <Title title=\"Add contacts\" />\r\n        <ContactForm />\r\n        <Title title=\"Сontacts\" />\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// Imports from React\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// Imports from Redux\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n// import { store, persistor } from './redux/store';\r\n//Imports from Redux Persist\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\n// Imports of components\r\nimport App from './App';\r\n// Styles imports\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading=\"Loading...\" persistor={persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);"],"sourceRoot":""}